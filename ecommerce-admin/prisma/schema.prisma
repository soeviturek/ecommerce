// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

// npx prisma generate add prisma model to node module 
model Store{
  id            String @id @default(uuid())
  name          String
  userId        String
  billboards  Billboard[] @relation("StoreToBillboard")
  categories Category[] @relation("StoreToCategory")
  sizes         Size[] @relation("StoreToSize")
  colours         Colour[] @relation("StoreToColour")
  products         Product[] @relation("StoreToProduct")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Billboard{
    id      String @id @default(uuid())
    storeId String
    // storeId property, relation is connected to the store, targeting field storeId, refering to the id in the store
    store Store @relation("StoreToBillboard",fields:[storeId],references: [id])
    label String
    imageUrl String
    categories Category[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([storeId]) //resolve the store warning
}

model Category{
  id String @id @default(uuid())
  name String
  storeId String
  store Store @relation("StoreToCategory",fields:[storeId],references:[id])
  billboardId String
  billboard Billboard @relation(fields:[billboardId],references:[id])
  products Product[] @relation("CategoryToProduct")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToSize", fields:[storeId],references:[id])
  name String
  value String
  products Product[]
  // product Product
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  
  @@index([storeId])
}
model Colour{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToColour", fields:[storeId],references:[id])
  name String
  value String
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  
  @@index([storeId])
}

model Product{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToProduct",fields:[storeId],references:[id])
  categoryId String
  category Category @relation("CategoryToProduct",fields:[categoryId],references:[id])
  name String
  price Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  sizeId String
  size Size @relation(fields:[sizeId],references:[id])
  colourId String
  colour Colour @relation(fields:[colourId],references:[id])
  images Image[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colourId])


}

model Image{
  id String @id @default(uuid())
  productId String
  // delete product even if we have images
  product Product @relation(fields:[productId],references:[id],onDelete: Cascade)
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}